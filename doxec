#!/bin/bash 

#####################
# This script allows you to execute any command in the web container
# You can create an alias to this file in your .bashrc or .zshrc file
# alias doxec="bash ./doxec"
# then you can execute any command in the web container by running
# doxec <command>
# example: doxec php bin/console make:entity
# 
# shortcut available installing symfony dependencies and fixtures
# example: doxec sf install
#
# shortcut available for symfony commands
# example: doxec sf make:entity
#
# shortcut to enter bash in web container
# example: doxec bash
#####################

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CLEAR='\033[0m'

# If no command provided
if [ -z "$1" ]; then
  printf "\n${RED}No command provided${CLEAR} \n"
  printf "Usage: ${GREEN}\"doxec <command>\"${CLEAR} \n"
  printf "Example: ${GREEN}\"doxec composer install\"${CLEAR} \n\n"
  printf "Shortcut available for symfony commands: \n"
  printf "Example: ${GREEN}\"doxec symfony make:entity\"${CLEAR} \n\n"
  exit 1
fi

# Stop containers, clear volume, remove image web
if [ "$1" = "clean" ]; then
  # Ask for confirmation
  printf "\n${YELLOW}== Cleaning ==${CLEAR} \n"
  printf "${YELLOW}WARNING: IT WILL DOWN YOUR CONTAINERS, REMOVE IMAGES AND VOLUMES${CLEAR} \n"
  printf "Do you want to continue? [y/N] "
  read -r CONFIRMATION
  if [ "$CONFIRMATION" != "y" ] && [ "$CONFIRMATION" != "Y" ]; then
    printf "\n${YELLOW}== Abort ==${YELLOW} \n\n"
    exit 1
  fi

  printf "\n${GREEN}== Cleaning ==${CLEAR} \n\n"
  CURRENT_FOLDER_NAME=${PWD##*/}
  CURRENT_FOLDER_NAME=$(echo "$CURRENT_FOLDER_NAME" | tr '[:upper:]' '[:lower:]')
  docker compose down
  docker volume prune -f
  docker rmi ${CURRENT_FOLDER_NAME}-web
  exit 0
fi

# If doxec up
if [ "$1" = "up" ]; then
  printf "\n${GREEN}== Starting containers ==${CLEAR} \n\n"
  CURRENT_UID=$(id -u):$(id -g) docker compose up -d
  exit 0
fi

# If web container is not running
if [ -z "$(docker ps -q -f name=web)" ]; then
  printf "\n${RED}Web container is not running${CLEAR} \n"
  printf "Run ${GREEN}\"doxec up\"${CLEAR} to start it \n\n"
  exit 1
fi

# If doxec down
if [ "$1" = "down" ]; then
  printf "\n${GREEN}== Remove web containers ==${CLEAR} \n\n"
  docker compose down
  exit 0
fi

# stop
if [ "$1" = "stop" ]; then
  printf "\n${GREEN}== Stopping web container ==${CLEAR} \n\n"
  docker compose stop
  exit 0
fi

# If commande is "bash" enter bash in web container
if [ "$1" = "bash" ]; then
  printf "\n${GREEN}== Entering bash in web container ==${CLEAR} \n\n"
  docker exec -it web bash
  exit 0
fi

# If commande is "sf install" and project not installed, install it
if [ "$1" = "sf" ] && [ "$2" = "install" ]; then
  # if project files not found use symfony installer
  if [ ! -f "symfony.lock" ]; then
    printf "\n${YELLOW}== Project installation ==${CLEAR} \n"
    printf "${YELLOW}It will install a new Symfony Project ${CLEAR} \n"
    printf "Do you want to continue? [y/N] "
    read -r CONFIRMATION
    if [ "$CONFIRMATION" != "y" ] && [ "$CONFIRMATION" != "Y" ]; then
      printf "\n${YELLOW}== Abort ==${YELLOW} \n\n"
      exit 1
    fi

    printf "\n${GREEN}== Installing project ==${CLEAR} \n"
    printf "\n Installing symfony... \n"
    # move all files in a tmp folder in the ocntainer
    docker exec -it web mkdir -p tmp
    # install symfony in tmp folder
    docker exec -it web composer create-project symfony/website-skeleton tmp --no-interaction
    # remove docker files generated by orm pack
    docker exec -it web rm -rf tmp/docker-compose.yml tmp/docker-compose.override.yml

    # move all files from tmp folder to current folder with hidden files
    docker exec -it web mv -f tmp/{.,}* .
    # remove tmp folder
    docker exec -it web rm -rf tmp
    
    docker exec -it web composer require --dev doctrine/doctrine-fixtures-bundle
    docker exec -it web composer require symfony/mercure

    touch .env.local
    printf "DATABASE_URL=mysql://user:password@db/database?serverVersion=5.7&charset=utf8mb4\n" >> .env.local

    printf "\n${YELLOW} initializing git ${CLEAR}\n\n"
    git init

    printf "\n${GREEN}== Project installed ==${CLEAR} \n\n"
    printf "Create your entities with: ${YELLOW}doxec sf make:entity${CLEAR} \n"
    printf "Create your migrations with: ${YELLOW}doxec sf make:migration${CLEAR} \n"
    printf "Migrate your database with: ${YELLOW}doxec sf doctrine:migrations:migrate${CLEAR} \n"
    printf "Load your fixtures with: ${YELLOW}doxec sf doctrine:fixtures:load${CLEAR} \n\n"

    exit 0
  fi

  # Ask for confirmation
  printf "\n${YELLOW}== Project installation ==${CLEAR} \n"
  printf "${YELLOW}WARNING: IT WILL DESTROY YOUR CURRENT DATABASE${CLEAR} \n"
  printf "${YELLOW}It will then install composer dependencies, migrate and load your fixtures${CLEAR} \n"
  printf "Do you want to continue? [y/N] "
  read -r CONFIRMATION
  if [ "$CONFIRMATION" != "y" ] && [ "$CONFIRMATION" != "Y" ]; then
    printf "\n${YELLOW}== Abort ==${YELLOW} \n\n"
    exit 1
  fi

  printf "\n${GREEN}== Installing project ==${CLEAR} \n"
  printf "\n 1/3 Installing dependencies... \n"
  docker exec -it web composer install

  printf "\n 2/3 Migrating database... \n"
  docker exec -it web php bin/console doctrine:migrations:migrate --no-interaction

  printf "\n 3/3 Loading fixtures... \n"
  docker exec -it web php bin/console doctrine:fixtures:load --no-interaction

  printf "\n${GREEN}== Project installed ==${CLEAR} \n\n"

  exit 0
fi

# if project not installed, tell to install
if [ ! -f "symfony.lock" ]; then
  printf "\n${RED}Project not installed${CLEAR} \n"
  printf "Run ${GREEN}\"doxec sf install\"${CLEAR} to install it \n\n"
  exit 1
fi


# Shortcut for symfony commands
if [ "$1" = "sf" ]; then
  shift
  set -- "php bin/console" "$@"
fi

# Command
COMMAND="$@"

# Display command that will be executed
printf "\n${GREEN}== Executing '${COMMAND}' in web container ==${CLEAR} \n\n"

# Execute in web container (docker)
docker exec -it web ${COMMAND}

printf "\n${GREEN}== Command finished ==${CLEAR} \n\n"
